#if !defined(INC_TT_INPUT_KEYLIST_H)
#define INC_TT_INPUT_KEYLIST_H


#include <string>


namespace tt {
namespace input {

/*! \brief Key code values.
    \note This list ensures key code values are the same as what Windows uses,
          so that the current Toki Tori Steam key bindings will not break. */
enum Key
{
	Key_Unknown0,
	Key_Unknown1,
	Key_Unknown2,
	Key_Unknown3,
	Key_Unknown4,
	Key_Unknown5,
	Key_Unknown6,
	Key_Unknown7,
	Key_Backspace,
	Key_Tab,
	Key_Unknown10,
	Key_Unknown11,
	Key_Clear,  // FIXME: What is the "clear" key?
	Key_Enter, // Return/Enter key
	Key_Unknown14,
	Key_Unknown15,
	Key_Shift,   // Shift key
	Key_Control, // Ctrl key
	Key_Alt,     // Alt key
	Key_Break,   // Pause/Break key
	Key_CapsLock,
	Key_Unknown21,
	Key_Unknown22,
	Key_Unknown23,
	Key_Unknown24,
	Key_Unknown25,
	Key_Unknown26,
	Key_Escape,
	Key_Unknown28,
	Key_Unknown29,
	Key_Unknown30,
	Key_Unknown31,
	Key_Space,
	Key_PageUp,
	Key_PageDown,
	Key_End,
	Key_Home,
	Key_Left,
	Key_Up,
	Key_Right,
	Key_Down,
	Key_Unknown41,
	Key_Unknown42,
	Key_Unknown43,
	Key_Unknown44,
	Key_Insert,
	Key_Delete,
	Key_Unknown47,
	Key_0,
	Key_1,
	Key_2,
	Key_3,
	Key_4,
	Key_5,
	Key_6,
	Key_7,
	Key_8,
	Key_9,
	Key_Unknown58,
	Key_Unknown59,
	Key_Unknown60,
	Key_Unknown61,
	Key_Unknown62,
	Key_Unknown63,
	Key_Unknown64,
	Key_A,
	Key_B,
	Key_C,
	Key_D,
	Key_E,
	Key_F,
	Key_G,
	Key_H,
	Key_I,
	Key_J,
	Key_K,
	Key_L,
	Key_M,
	Key_N,
	Key_O,
	Key_P,
	Key_Q,
	Key_R,
	Key_S,
	Key_T,
	Key_U,
	Key_V,
	Key_W,
	Key_X,
	Key_Y,
	Key_Z,
	Key_Unknown91,
	Key_Unknown92,
	Key_Unknown93,
	Key_Unknown94,
	Key_Unknown95,
	Key_Numpad0,
	Key_Numpad1,
	Key_Numpad2,
	Key_Numpad3,
	Key_Numpad4,
	Key_Numpad5,
	Key_Numpad6,
	Key_Numpad7,
	Key_Numpad8,
	Key_Numpad9,
	Key_Multiply, // asterisk ('*')
	Key_Unknown107,
	Key_Unknown108,
	Key_Unknown109,
	Key_Unknown110,
	Key_Slash, // slash/divide key ('/')
	Key_F1,
	Key_F2,
	Key_F3,
	Key_F4,
	Key_F5,
	Key_F6,
	Key_F7,
	Key_F8,
	Key_F9,
	Key_F10,
	Key_F11,
	Key_F12,
	Key_Unknown124,
	Key_Unknown125,
	Key_Unknown126,
	Key_Unknown127,
	Key_Unknown128,
	Key_Unknown129,
	Key_Unknown130,
	Key_Unknown131,
	Key_Unknown132,
	Key_Unknown133,
	Key_Unknown134,
	Key_Unknown135,
	Key_Unknown136,
	Key_Unknown137,
	Key_Unknown138,
	Key_Unknown139,
	Key_Unknown140,
	Key_Unknown141,
	Key_Unknown142,
	Key_Unknown143,
	Key_NumLock,
	Key_ScrollLock,
	Key_Unknown146,
	Key_Unknown147,
	Key_Unknown148,
	Key_Unknown149,
	Key_Unknown150,
	Key_Unknown151,
	Key_Unknown152,
	Key_Unknown153,
	Key_Unknown154,
	Key_Unknown155,
	Key_Unknown156,
	Key_Unknown157,
	Key_Unknown158,
	Key_Unknown159,
	Key_Unknown160,
	Key_Unknown161,
	Key_Unknown162,
	Key_Unknown163,
	Key_Unknown164,
	Key_Unknown165,
	Key_Unknown166,
	Key_Unknown167,
	Key_Unknown168,
	Key_Unknown169,
	Key_Unknown170,
	Key_Unknown171,
	Key_Unknown172,
	Key_Unknown173,
	Key_Unknown174,
	Key_Unknown175,
	Key_Unknown176,
	Key_Unknown177,
	Key_Unknown178,
	Key_Unknown179,
	Key_Unknown180,
	Key_Unknown181,
	Key_Unknown182,
	Key_Unknown183,
	Key_Unknown184,
	Key_Unknown185,
	Key_Semicolon,  // ;
	Key_Plus,
	Key_Comma,
	Key_Minus,
	Key_Period,
	Key_SlashQuestionmark,  // The /? key (on US keyboards)
	Key_Grave,      // Key containing tilde on US keyboards ('`')
	Key_Unknown193,
	Key_Unknown194,
	Key_Unknown195,
	Key_Unknown196,
	Key_Unknown197,
	Key_Unknown198,
	Key_Unknown199,
	Key_Unknown200,
	Key_Unknown201,
	Key_Unknown202,
	Key_Unknown203,
	Key_Unknown204,
	Key_Unknown205,
	Key_Unknown206,
	Key_Unknown207,
	Key_Unknown208,
	Key_Unknown209,
	Key_Unknown210,
	Key_Unknown211,
	Key_Unknown212,
	Key_Unknown213,
	Key_Unknown214,
	Key_Unknown215,
	Key_Unknown216,
	Key_Unknown217,
	Key_Unknown218,
	Key_LeftSquareBracket,  // [
	Key_Backslash,          // Backslash ('\')
	Key_RightSquareBracket, // ]
	Key_Apostrophe,         // '
	Key_Unknown223,
	Key_Unknown224,
	Key_Unknown225,
	Key_Unknown226,
	Key_Unknown227,
	Key_Unknown228,
	Key_Unknown229,
	Key_Unknown230,
	Key_Unknown231,
	Key_Unknown232,
	Key_Unknown233,
	Key_Unknown234,
	Key_Unknown235,
	Key_Unknown236,
	Key_Unknown237,
	Key_Unknown238,
	Key_Unknown239,
	Key_Unknown240,
	Key_Unknown241,
	Key_Unknown242,
	Key_Unknown243,
	Key_Unknown244,
	Key_Unknown245,
	Key_Unknown246,
	Key_Unknown247,
	Key_Unknown248,
	Key_Unknown249,
	Key_Unknown250,
	Key_Unknown251,
	Key_Unknown252,
	Key_Unknown253,
	Key_Unknown254,
	Key_Unknown255,
	
	Key_Count  // number of key codes that are available; not an actual key code
};


const char* getKeyName(Key p_key);
Key getKeyFromName(const std::string& p_name);

// Namespace end
}
}


#endif  // !defined(INC_TT_INPUT_KEYLIST_H)
